#include <iostream>
using namespace std;

#define N 4

bool isSafe(int maze[N][N], int x, int y, int sol[N][N]) {
    return (x >= 0 && y >= 0 && x < N && y < N &&
            sol[x][y] == 0 && maze[x][y] == 1);
}

bool findEscape(int maze[N][N], int x, int y, int sol[N][N]) {
    // Base case: reached destination
    if (x == N - 1 && y == N - 1 && maze[x][y] == 1) {
        sol[x][y] = 1;
        return true;
    }

    // Check if current cell is safe to move into
    if (isSafe(maze, x, y, sol)) {
        sol[x][y] = 1; // mark cell as part of path

        // Move right
        if (findEscape(maze, x, y + 1, sol))
            return true;

        // Move down
        if (findEscape(maze, x + 1, y, sol))
            return true;

        // Move left
        if (findEscape(maze, x, y - 1, sol))
            return true;

        // Move up
        if (findEscape(maze, x - 1, y, sol))
            return true;

        // Backtrack (unmark)
        sol[x][y] = 0;
    }

    return false;
}

int main() {
    int maze[N][N] = {
        {1, 1, 0, 1},
        {0, 1, 1, 0},
        {1, 1, 0, 1},
        {0, 1, 1, 1}
    };

    int sol[N][N] = {0};

    cout << "Original Maze:\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cout << maze[i][j] << " ";
        cout << endl;
    }

    if (findEscape(maze, 0, 0, sol)) {
        cout << "\nEscape Path:\n";
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++)
                cout << sol[i][j] << " ";
            cout << endl;
        }
    } else {
        cout << "\nNo escape for this maze!\n";
    }

    return 0;
}
